# version: '3.8'

services:
  # Nginx as API Gateway/Reverse Proxy for Backend Microservices
  nginx-api-gateway:
    image: nginx:alpine
    container_name: nginx-api-gateway
    ports:
      - "8080:80" # Ubah port Nginx API Gateway agar tidak bentrok dengan frontend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - course-service
      - student-service
      - teacher-service
      - enrollment-service
    networks:
      - app-network

  # Frontend Application (Served by its own Nginx instance)
  frontend-app:
    build:
      context: ./frontend # Path ke folder frontend Anda
      dockerfile: Dockerfile
    container_name: frontend-app
    ports:
      - "80:80" # Frontend akan diakses langsung di port 80 (localhost)
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro # Mount konfigurasi Nginx frontend
      # Jika Anda ingin hot-reloading di development, Anda mungkin perlu mount kode sumber:
      # - ./frontend:/app # Hati-hati dengan hot-reloading di Docker dengan volume
    depends_on:
      - nginx-api-gateway # Opsional, jika frontend perlu pastikan API gateway jalan
    networks:
      - app-network

  # --- Backend Services (Path updated to backend/...) ---

  # Course Service (Laravel)
  course-service:
    build:
      context: ./backend/course-service # Path baru
      dockerfile: Dockerfile
    container_name: course-service
    restart: unless-stopped
    volumes:
      - ./backend/course-service:/var/www/html # Path baru
    environment:
      APP_URL: http://course-service
      DB_CONNECTION: mysql
      DB_HOST: course-service-db
      DB_DATABASE: db_courses_microservice
      DB_USERNAME: root
      DB_PASSWORD: ""
      REDIS_HOST: redis-cache
      MAIL_MAILER: smtp
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      APP_KEY: base64:5mpW2FEbEBvkCbCrveufBJ+xgtbgZWFd1tr3/s6yrN8=
    depends_on:
      - course-service-db
      - redis-cache
      - mailhog
    networks:
      - app-network

  course-service-db:
    image: mysql:8
    container_name: course-service-db
    environment:
      MYSQL_DATABASE: db_courses_microservice
      MYSQL_ROOT_PASSWORD: ""
    volumes:
      - db_course_data:/var/lib/mysql
    networks:
      - app-network

  # Student Service (Laravel)
  student-service:
    build:
      context: ./backend/student-service # Path baru
      dockerfile: Dockerfile
    container_name: student-service
    restart: unless-stopped
    volumes:
      - ./backend/student-service:/var/www/html # Path baru
    environment:
      APP_URL: http://student-service
      DB_CONNECTION: mysql
      DB_HOST: student-service-db
      DB_DATABASE: db_students_microservice
      DB_USERNAME: root
      DB_PASSWORD: ""
      REDIS_HOST: redis-cache
      MAIL_MAILER: smtp
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      APP_KEY: base64:some_unique_base64_key_for_student_service
    depends_on:
      - student-service-db
      - redis-cache
      - mailhog
    networks:
      - app-network

  student-service-db:
    image: mysql:8
    container_name: student-service-db
    environment:
      MYSQL_DATABASE: db_students_microservice
      MYSQL_ROOT_PASSWORD: ""
    volumes:
      - db_student_data:/var/lib/mysql
    networks:
      - app-network

  # Teacher Service (Laravel)
  teacher-service:
    build:
      context: ./backend/teacher-service # Path baru
      dockerfile: Dockerfile
    container_name: teacher-service
    restart: unless-stopped
    volumes:
      - ./backend/teacher-service:/var/www/html # Path baru
    environment:
      APP_URL: http://teacher-service
      DB_CONNECTION: mysql
      DB_HOST: teacher-service-db
      DB_DATABASE: db_teachers_microservice
      DB_USERNAME: root
      DB_PASSWORD: ""
      REDIS_HOST: redis-cache
      MAIL_MAILER: smtp
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      APP_KEY: base64:another_unique_base64_key_for_teacher_service
    depends_on:
      - teacher-service-db
      - redis-cache
      - mailhog
    networks:
      - app-network

  teacher-service-db:
    image: mysql:8
    container_name: teacher-service-db
    environment:
      MYSQL_DATABASE: db_teachers_microservice
      MYSQL_ROOT_PASSWORD: ""
    volumes:
      - db_teacher_data:/var/lib/mysql
    networks:
      - app-network

  # Enrollment Service (Laravel)
  enrollment-service:
    build:
      context: ./backend/enrollment-service # Path baru
      dockerfile: Dockerfile
    container_name: enrollment-service
    restart: unless-stopped
    volumes:
      - ./backend/enrollment-service:/var/www/html # Path baru
    environment:
      APP_URL: http://enrollment-service
      DB_CONNECTION: mysql
      DB_HOST: enrollment-service-db
      DB_DATABASE: db_enrollments_microservice
      DB_USERNAME: root
      DB_PASSWORD: ""
      REDIS_HOST: redis-cache
      MAIL_MAILER: smtp
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      APP_KEY: base64:yet_another_unique_base64_key_for_enrollment_service
    depends_on:
      - enrollment-service-db
      - redis-cache
      - mailhog
    networks:
      - app-network

  enrollment-service-db:
    image: mysql:8
    container_name: enrollment-service-db
    environment:
      MYSQL_DATABASE: db_enrollments_microservice
      MYSQL_ROOT_PASSWORD: ""
    volumes:
      - db_enrollment_data:/var/lib/mysql
    networks:
      - app-network

  # Shared Services
  redis-cache:
    image: redis:alpine
    container_name: redis-cache
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - app-network

volumes:
  db_course_data:
  db_student_data:
  db_teacher_data:
  db_enrollment_data:
  redis_data:

networks:
  app-network:
    driver: bridge