"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2018-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Course entity representing a training or educational course."
type Course {
    "Unique primary key."
    id_course: ID!

    "Course name."
    nama_course: String!

    "Course description."
    deskripsi: String!

    "Start date of the course."
    tgl_mulai: Date!

    "End date of the course."
    tgl_selesai: Date!

    "Category/field of the course."
    kat_bidang: String!

    "Course capacity (maximum number of participants)."
    kapasitas: Int!

    "When the course was created."
    created_at: DateTime!

    "When the course was last updated."
    updated_at: DateTime!

    duration_days: Int
    is_active: Boolean
    is_upcoming: Boolean
    is_ended: Boolean
}

type Query {
    "Find a single course by an identifying attribute."
    course(
        "Search by primary key."
        id_course: ID @eq @rules(apply: ["required_without:nama_course"])

        "Search by course name."
        nama_course: String @eq @rules(apply: ["required_without:id_course"])
    ): Course @find(model: "App\\Models\\Course")

    "List multiple courses with optional filtering."
    courses(
        "Filters by course name. Accepts SQL LIKE wildcards `%` and `_`."
        nama_course: String @where(operator: "like")

        "Filters by category/field."
        kat_bidang: String @where(operator: "like")

        "Filters by start date."
        tgl_mulai: Date @where(operator: ">=")

        "Filters by end date."
        tgl_selesai: Date @where(operator: "<=")

        "Filters by minimum capacity."
        kapasitas: Int @where(operator: ">=")
    ): [Course!]! @all(model: "App\\Models\\Course")

    "Search courses by name or description."
    searchCourses(
        "Search term for course name or description."
        search: String!
    ): [Course!]!
        @paginate(model: "App\\Models\\Course", defaultCount: 10)
        @scope(name: "search")

    "Get courses by category/field."
    coursesByCategory(
        "Category/field to filter by."
        kat_bidang: String!
    ): [Course!]! @paginate(model: "App\\Models\\Course", defaultCount: 10)

    "Get upcoming courses (start date >= today)."
    upcomingCourses: [Course!]!
        @paginate(model: "App\\Models\\Course", defaultCount: 10)
        @scope(name: "upcoming")

    "Get active courses (current date between start and end date)."
    activeCourses: [Course!]!
        @paginate(model: "App\\Models\\Course", defaultCount: 10)
        @scope(name: "active")
}

type Mutation {
    "Create a new course."
    createCourse(
        nama_course: String! @rules(apply: ["required", "string", "max:255"])
        deskripsi: String! @rules(apply: ["required", "string"])
        tgl_mulai: Date! @rules(apply: ["required", "date"])
        tgl_selesai: Date!
            @rules(apply: ["required", "date", "after:tgl_mulai"])
        kat_bidang: String! @rules(apply: ["required", "string", "max:255"])
        kapasitas: Int! @rules(apply: ["required", "integer", "min:1"])
    ): Course! @create(model: "App\\Models\\Course")

    "Update an existing course."
    updateCourse(
        id_course: ID! @rules(apply: ["required", "exists:courses,id_course"])
        nama_course: String @rules(apply: ["string", "max:255"])
        deskripsi: String @rules(apply: ["string"])
        tgl_mulai: Date @rules(apply: ["date"])
        tgl_selesai: Date @rules(apply: ["date", "after:tgl_mulai"])
        kat_bidang: String @rules(apply: ["string", "max:255"])
        kapasitas: Int @rules(apply: ["integer", "min:1"])
    ): Course! @update(model: "App\\Models\\Course")

    "Delete a course."
    deleteCourse(
        id_course: ID! @rules(apply: ["required", "exists:courses,id_course"])
    ): Course! @delete(model: "App\\Models\\Course")
}
